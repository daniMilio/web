---
description: 
globs: 
alwaysApply: false
---
# API and Data Management

## GraphQL Integration

The project uses Zeus for type-safe GraphQL operations. Key patterns:

- Use `typedGql` from the `zeus` directory for all GraphQL operations
- Example usage:
```typescript
import { typedGql } from '~/zeus';

// Query example
const { data } = await typedGql.query({
  users: {
    id: true,
    name: true,
    email: true
  }
});

// Mutation example
const { data } = await typedGql.mutation({
  createUser: {
    id: true,
    name: true
  }
}, {
  variables: {
    input: {
      name: "John",
      email: "john@example.com"
    }
  }
});
```

### Benefits of Zeus
- Full TypeScript type safety
- Autocomplete for GraphQL operations
- Runtime type checking
- No need for manual type definitions

## Server-Side API

- Server routes are in the `server/` directory
- Use TypeScript for type safety
- Implement proper error handling
- Follow RESTful principles where applicable

## WebSocket Communication

- WebSocket handlers in `web-sockets/` directory
- Implement proper connection management
- Handle reconnection logic
- Use TypeScript for message types

## State Management

### Pinia Stores
- Store files are in `stores/` directory
- Use TypeScript interfaces for state
- Implement actions for async operations
- Keep stores focused and modular

### Data Flow
1. Components dispatch actions to stores
2. Stores handle API calls using typedGql
3. Components react to state changes
4. Use computed properties for derived state

## Error Handling
- Implement proper error boundaries
- Use TypeScript for error types
- Log errors appropriately
- Provide user-friendly error messages
