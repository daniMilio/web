---
description: 
globs: 
alwaysApply: false
---
# Development Workflow

## Environment Setup

1. Use Node.js version specified in [.nvmrc](mdc:.nvmrc)
2. Copy `.env-example` to `.env` and configure environment variables
3. Install dependencies using `yarn install`

## Development Guidelines

### Component Development
- Place new components in the `components/` directory
- Use TypeScript for all new components
- Follow Vue 2 Options API patterns:
  - Use `data()` for component state
  - Use `methods` for component functions
  - Use `computed` for derived properties
  - Use `watch` for reactive side effects
  - Use `props` for component properties
  - Use `mounted()` and other lifecycle hooks
- Use Tailwind CSS for styling

### State Management
- Use Pinia stores in the `stores/` directory
- Keep stores modular and focused
- Use TypeScript interfaces for store state

### API Integration
- GraphQL queries and mutations go in the `graphql/` directory
- Server-side API routes belong in `server/`
- WebSocket handlers should be in `web-sockets/`

### Testing
- Write unit tests for components and stores
- Test API integrations
- Ensure proper error handling

### Deployment
- Cloudflare Workers configuration in `wrangler.jsonc`
- Environment variables in `.dev.vars` for local development
- Production environment variables in Cloudflare dashboard

## Code Style
- Follow TypeScript best practices
- Use ESLint and Prettier for code formatting
- Keep components small and focused
- Document complex logic with comments
