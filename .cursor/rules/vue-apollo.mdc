---
description: 
globs: 
alwaysApply: false
---
# Vue Apollo Integration

## Apollo Client Setup

The Apollo client is configured in `plugins/apollo.client.ts` with the following key features:
- HTTP and WebSocket links for queries and subscriptions
- Error handling with retry logic
- Default fetch policies
- Type-safe GraphQL operations using Zeus

## Usage Patterns

### Queries
```typescript
apollo: {
  queryName: {
    query: generateQuery({
      // Query definition
    }),
    fetchPolicy: "network-only", // Optional
    variables() {
      return {
        // Query variables
      }
    }
  }
}
```

### Subscriptions
```typescript
apollo: {
  $subscribe: {
    subscriptionName: {
      query: typedGql("subscription")({
        // Subscription definition
      }),
      variables() {
        return {
          // Subscription variables
        }
      },
      result({ data }) {
        // Handle subscription data
      }
    }
  }
}
```

### Mutations
```typescript
await this.$apollo.mutate({
  mutation: generateMutation({
    mutationName: [
      variables,
      selection
    ]
  })
})
```

## Key Features

- **Type Safety**: Using Zeus for type-safe GraphQL operations
- **Real-time Updates**: WebSocket subscriptions for live data
- **Error Handling**: Centralized error handling with retry logic
- **Caching**: Configurable fetch policies (cache-first, network-only, etc.)
- **Authentication**: Credentials included in requests

## Common Patterns

- Pagination with `limit` and `offset`
- Aggregate queries for counting
- Real-time updates using subscriptions
- Form handling with mutations
- Error handling with toast notifications

## Best Practices

- Centralized Apollo client configuration
- Type-safe operations with Zeus
- Proper error handling and retries
- Efficient caching strategies
- WebSocket integration for real-time features
